const { Router } = require("express")
const router =  Router()
const { User, Workspace } = require("../database/index.js")
const { userSignin, userSignup, userAuthMiddleware, userSchemaValidation} = require("../middlewares/user.js")
const jwt = require("jsonwebtoken")
require("dotenv").config({path: "../.env"})

const JWT_SECRET = process.env.JWT_SECRET

router.post("/signup", userSchemaValidation, userSignup, async (req, res) => {

    const { email, username, password } = req.body 
    
    await User.create({
        email,
        username,
        password
    })

    await Workspace.create({
        username,
        currentWorkspace: 1
    })
    await Workspace.create({
        username,
        currentWorkspace: 2
    })
    await Workspace.create({
        username,
        currentWorkspace: 3
    })

    res.json({msg: "User created successfully!"})

})

router.post("/signin", userSignin, (req, res) => {

    const username = req.body.username
    const token = jwt.sign({username}, JWT_SECRET)

    res.json({
        token,
        username
    })

})

router.use(userAuthMiddleware)
// All routes below will use this middleware 

router.get("/pageauthcheck", (req, res) => {
    res.json({msg: "Allowed"})
})

router.post("/studio", (req, res) => {
    const prompt = req.body.prompt
    const model = req.headers.model
    // ML AI API
    res.json({msg: `The Output generated by ${model} is: ${prompt}`})
})

router.put("/updatecred", async (req, res) => {
    const { password, newpassword } = req.body
    const username = req.headers.username
    const isUser = await User.findOne({
        username,
        password
    })

    if (isUser == null) {
        res.json({msg: "Wrong Password !"})
    } else {
        await User.updateOne({username},{password: newpassword})
        res.json({msg: "Password Updated Successfully"})
    }
})


// router.post("/newworkspace", async (req, res) => {
//     const username = req.headers.username

//     const userWorkspace = await Workspace.findOne({ username })

//     await Workspace.create({
//         username,
//         workspaces: [{
//             output: "",
//             model: "",
//             currentWorkspace: (userWorkspace.workspaces.length + 1)
//         }]
//     })
// })

router.post("/workspace", async (req, res) => {
    const { output, model, currentworkspace } = req.body
    const username = req.headers.username

    await Workspace.updateOne({
        username, currentWorkspace: currentworkspace
    },{
        model,
        $push: { output:[output] }
    })

    res.json({msg: `Workspace Updated ! Info: output-${output}, model-${model}, workspace no-${currentworkspace}, username-${username}`})
})

module.exports = router